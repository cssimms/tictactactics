c
node
c
n
node
n
node
n
possible_moves.length
possible_moves
n
node
c
node
n
possible_moves
n
node.children
possible_moves
node
c
node.children
node
c
node.children
node
possible_moves
node.children
node
c
node
q
c
q
c
new_board[*pos] = self.next_mover_mark
new_board[pos] = self.next_mover_mark
pos
self.next_mover_mark
c
@games
c
@game
c
comp_id
@game
c
@game.save
@game
c
params
game_params
@game
game
c
cc
c
game_params
@game
q
game_params
@game
q
c
@games
q
c
@games
q
@games
q
c
game_params[:userId]
game_params
@games
q
c
cc
c
cc
c
@games
q
c
params
c
params
c
params
c
current_user
c
current_user
quit
qut
c
cc
c
cc
c
@board
@board.place_mark(move['pos'], move['mark'])
self.build_game
move
c
@game.make_move(move)
n
c
@errors
n
@errors
@game
n
move
n
pos
n
params
c
move
JSON.parse(self.moveset)
self.moveset
c
@errors
n
c
empty?(pos)
your_turn?(mark)
in_bounds?(pos)
mark
pos
c
@board.place_mark(move, mark)
@board
self.moveset
self
self.build_game
mark
move
c
@game.make_move(new_move, game_params[:mark])
@game
new_move
c
n
self
n
@board
self
quit
@board
self.board
self
c
self
c
Game.find_by_id(7)
self
c
quit
self
c
your_turn?('X')
in_bounds?(pos)
c
pos
in_bounds?(pos)
in_bounds?(pos)_
c
in_bounds?(pos)
mark
pos
c
mark
move
c
move
c
move
c
move
c
move
s
n
mark
n
c
mark
pos
n
@board
n
moves
n
c
move
c
n
move
c
params
c
JSON.parse(params[:game])
params[:game]
params
c
json.extract! @game
@game
c
@game
c
json.extract! @game
@game
c
self
c
self
c
self
exit
qxit
c
line.all?{|p| self[*p] == "X"}
self[1,1]
self[[1,1,]]
c
self.moveset
c
self.moveset
c
display self
c
display line
c
line
c
self.moveset
self
c
self
c
self
c
self
c
self
c
line
c
s
line
s
self
c
self
